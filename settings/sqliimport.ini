#?ini charset="utf-8"?
# DO NOT EDIT THIS FILE !
# Use an override instead

[ImportSettings]
# Default parent node ID for imported content
# Used as a fallback setting if no such setting has been defined for source handler
DefaultParentNodeID=2

# View caching is disabled by default for performance reasons
# It's disabled only for the import script
# ViewCache is cleared once import has been done, via sqliimport_cleanup cronjob
ViewCaching=disabled

# Same as for ViewCaching above
# Import will be much faster with ObjectIndexing set to disabled
# Will just activate site.ini SearchSettings.DelayedIndexing for current import script
# Content objects will be indexed once import has been done, via sqliimport_cleanup cronjob
ObjectIndexing=disabled

# List of available source handlers
# Each declared source handler must have a dedicated INI section
# Each handler has to be identified by a unique identifier (without space or special chars)
#AvailableSourceHandlers[]
#AvailableSourceHandlers[]=myhandler

# User ID of the XML Import Robot
# If none provided, site.ini [UserSettings]/AnonymousUserID will be used
RobotUserID=

# Max time to wait for each Stream (in seconds)
StreamTimeout=50

# INI Section for source handler
# Each declared source handler must have such a dedicated INI section
# Section name must be [<handler_identifier>-HandlerSettings]
##[myhandler-HandlerSettings]
## Indicates if handler is enabled or not. Mandatory. Must be "true" or "false"
##Enabled=true
## Intelligible name
##Name=My Handler
## Class for source handler. Must implement ISQLIImportSourceHandler and extend SQLIImportAbstractSourceHandler
##ClassName=MySourceHandler
## Facultative. Indicates whether debug is enabled or not  
##Debug=enabled
## Same as [ImportSettings]/DefaultParentNodeID, but source handler specific
##DefaultParentNodeID=2
## StreamTimeout, handler specific. If empty, will take [ImportSettings]/StreamTimeout
#StreamTimeout=
## Below you can add your own settings for your source handler

[ContentSettings]
# Diff handlers are used to check if a content field really needs to be updated or not.
# If a content object is strictly the same, then it shouldn't be published (avoids useless time consumption).
# By default, datatype toString() method is used to compare input content with current content, 
# but it can be insufficient with complex datatypes (ie. for images, binary files...).
# By defining a diff handler, you extend the SQLIImport content system allowing 
# it to check for content modification more accurately.
# Key is the datatype string, value is the class to use (must implement ISQLIDiffHandler
DiffHandlerMap[ezimage]=SQLIImageDiffHandler
DiffHandlerMap[ezbinaryfile]=SQLIBinaryFileDiffHandler

# Default diff handler that will be used if datatype is not mapped to a handler in DiffHandlerMap
# Note : It is HIGHLY RECOMMENDED for all datatypes to implement toString() methods (see eZDatatype::toString())
#        Attribute content will be indeed compared with toString() method or data_text field !
DefaultDiffHandler=SQLIDefaultDiffHandler

# Datatypes for which you want to skip content modification
ContentModificationSkipDatatypes[]
#ContentModificationSkipDatatypes[]=ezstring
